/*
 * Odessa State environmental University
 * Copyright (C) 2014
 */

package ua.edu.odeku.ceem.mapRadar.tools.cacheManager.panel;

import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import gov.nasa.worldwind.WorldWindow;
import ua.edu.odeku.ceem.mapRadar.tools.CeemRadarTool;
import ua.edu.odeku.ceem.mapRadar.tools.cacheManager.handler.CacheDownloaderHandler;

import javax.swing.*;
import java.awt.*;
import java.util.ResourceBundle;

/**
 * Created by Aleo on 02.02.14.
 */
public class CacheDownloaderForm {
    public JButton selectButton;
    private JPanel panel1;
    public JTextField sectorSelectedTextField;
    public JPanel layersPanel;
    public JButton startButton;
    public JPanel monitorPanel;
    public JTextField locationTextField;
    public JButton locationButton;

    private CacheDownloaderHandler handler;

    public CacheDownloaderForm(CeemRadarTool tool) {
        handler = new CacheDownloaderHandler(this, tool.appFrame().getWwd());
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new FormLayout("fill:d:grow", "center:max(d;4px):noGrow,top:4dlu:noGrow,center:d:noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow"));
        selectButton = new JButton();
        this.$$$loadButtonText$$$(selectButton, ResourceBundle.getBundle("button").getString("clear-sector"));
        CellConstraints cc = new CellConstraints();
        panel1.add(selectButton, cc.xy(1, 3));
        sectorSelectedTextField = new JTextField();
        sectorSelectedTextField.setColumns(0);
        sectorSelectedTextField.setEditable(false);
        panel1.add(sectorSelectedTextField, cc.xy(1, 5, CellConstraints.FILL, CellConstraints.DEFAULT));
        layersPanel = new JPanel();
        layersPanel.setLayout(new BorderLayout(0, 0));
        panel1.add(layersPanel, cc.xy(1, 7));
        layersPanel.setBorder(BorderFactory.createTitledBorder(ResourceBundle.getBundle("border_title").getString("layers_panel_cacheDownloader")));
        startButton = new JButton();
        this.$$$loadButtonText$$$(startButton, ResourceBundle.getBundle("button").getString("start-download"));
        panel1.add(startButton, cc.xy(1, 9));
        monitorPanel = new JPanel();
        monitorPanel.setLayout(new BorderLayout(0, 0));
        panel1.add(monitorPanel, cc.xy(1, 11));
        monitorPanel.setBorder(BorderFactory.createTitledBorder(ResourceBundle.getBundle("border_title").getString("layers_panel_cacheDownloading")));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new FormLayout("fill:d:noGrow,left:4dlu:noGrow,fill:d:grow,left:4dlu:noGrow,fill:max(d;4px):noGrow", "center:d:grow,top:4dlu:noGrow,center:max(d;4px):noGrow"));
        panel1.add(panel2, cc.xy(1, 1));
        panel2.setBorder(BorderFactory.createTitledBorder(ResourceBundle.getBundle("border_title").getString("layers_panel_cacheLocation")));
        final JLabel label1 = new JLabel();
        this.$$$loadLabelText$$$(label1, ResourceBundle.getBundle("label").getString("cacheManager_cacheLocation"));
        panel2.add(label1, cc.xy(1, 3));
        locationTextField = new JTextField();
        locationTextField.setEditable(false);
        panel2.add(locationTextField, cc.xy(3, 3, CellConstraints.FILL, CellConstraints.DEFAULT));
        locationButton = new JButton();
        this.$$$loadButtonText$$$(locationButton, ResourceBundle.getBundle("button").getString("select_location"));
        panel2.add(locationButton, cc.xy(5, 3));
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadLabelText$$$(JLabel component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setDisplayedMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadButtonText$$$(AbstractButton component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
}
