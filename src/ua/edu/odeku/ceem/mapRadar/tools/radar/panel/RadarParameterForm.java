/*
 * Odessa State environmental University
 * Copyright (C) 2014
 */

package ua.edu.odeku.ceem.mapRadar.tools.radar.panel;

import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;

import javax.swing.*;
import java.util.ResourceBundle;

/**
 * Форма призначена для відображення параметрів радару
 * Created by Aleo on 28.07.2014.
 */
public class RadarParameterForm {
    private JPanel panel1;
    public JTextField nameTextField;
    private JPanel namePanel;
    public JSpinner altitudeSpinner;
    private JPanel attributePanel;
    public JSpinner durationPulseSpinner;
    public JSpinner waveLengthSpinner;
    public JSpinner antennaDiameterSpinner;
    public JSpinner pulsePowerSpinner;
    public JSpinner reflectivityMeteoGoalsSpinner;
    public JSpinner attenuationSpinner;
    public JSpinner radiusSpinner;
    public JSpinner grainFactorSpinner;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new FormLayout("fill:d:grow", "center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow"));
        namePanel = new JPanel();
        namePanel.setLayout(new FormLayout("fill:d:noGrow,left:4dlu:noGrow,fill:d:grow", "center:d:noGrow"));
        CellConstraints cc = new CellConstraints();
        panel1.add(namePanel, cc.xy(1, 1));
        final JLabel label1 = new JLabel();
        this.$$$loadLabelText$$$(label1, ResourceBundle.getBundle("label").getString("airspace_name"));
        namePanel.add(label1, cc.xy(1, 1));
        nameTextField = new JTextField();
        namePanel.add(nameTextField, cc.xy(3, 1, CellConstraints.FILL, CellConstraints.DEFAULT));
        attributePanel = new JPanel();
        attributePanel.setLayout(new FormLayout("fill:d:noGrow,left:4dlu:noGrow,fill:max(d;100px):grow", "center:d:grow,center:d:grow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow"));
        panel1.add(attributePanel, cc.xy(1, 3));
        final JLabel label2 = new JLabel();
        this.$$$loadLabelText$$$(label2, ResourceBundle.getBundle("label").getString("airspace_altitude"));
        attributePanel.add(label2, cc.xy(1, 2));
        altitudeSpinner = new JSpinner();
        attributePanel.add(altitudeSpinner, cc.xy(3, 2, CellConstraints.FILL, CellConstraints.DEFAULT));
        final JLabel label3 = new JLabel();
        this.$$$loadLabelText$$$(label3, ResourceBundle.getBundle("label").getString("airspace_durationPulse"));
        attributePanel.add(label3, cc.xy(1, 4));
        durationPulseSpinner = new JSpinner();
        attributePanel.add(durationPulseSpinner, cc.xy(3, 4, CellConstraints.FILL, CellConstraints.DEFAULT));
        final JLabel label4 = new JLabel();
        this.$$$loadLabelText$$$(label4, ResourceBundle.getBundle("label").getString("airspace_wavelength"));
        attributePanel.add(label4, cc.xy(1, 6));
        final JLabel label5 = new JLabel();
        this.$$$loadLabelText$$$(label5, ResourceBundle.getBundle("label").getString("airspace_antennaDiameter"));
        attributePanel.add(label5, cc.xy(1, 8));
        final JLabel label6 = new JLabel();
        this.$$$loadLabelText$$$(label6, ResourceBundle.getBundle("label").getString("airspace_pulsePower"));
        attributePanel.add(label6, cc.xy(1, 10));
        waveLengthSpinner = new JSpinner();
        attributePanel.add(waveLengthSpinner, cc.xy(3, 6, CellConstraints.FILL, CellConstraints.DEFAULT));
        antennaDiameterSpinner = new JSpinner();
        attributePanel.add(antennaDiameterSpinner, cc.xy(3, 8, CellConstraints.FILL, CellConstraints.DEFAULT));
        pulsePowerSpinner = new JSpinner();
        attributePanel.add(pulsePowerSpinner, cc.xy(3, 10, CellConstraints.FILL, CellConstraints.DEFAULT));
        final JLabel label7 = new JLabel();
        this.$$$loadLabelText$$$(label7, ResourceBundle.getBundle("label").getString("airspace_reflectivityMeteoGoals"));
        attributePanel.add(label7, cc.xy(1, 12));
        final JLabel label8 = new JLabel();
        this.$$$loadLabelText$$$(label8, ResourceBundle.getBundle("label").getString("airspace_attenuation"));
        attributePanel.add(label8, cc.xy(1, 14));
        final JLabel label9 = new JLabel();
        this.$$$loadLabelText$$$(label9, ResourceBundle.getBundle("label").getString("airspace_radius"));
        attributePanel.add(label9, cc.xy(1, 16));
        final JLabel label10 = new JLabel();
        this.$$$loadLabelText$$$(label10, ResourceBundle.getBundle("label").getString("airspace_grainFactor"));
        attributePanel.add(label10, cc.xy(1, 18));
        reflectivityMeteoGoalsSpinner = new JSpinner();
        attributePanel.add(reflectivityMeteoGoalsSpinner, cc.xy(3, 12, CellConstraints.FILL, CellConstraints.DEFAULT));
        attenuationSpinner = new JSpinner();
        attributePanel.add(attenuationSpinner, cc.xy(3, 14, CellConstraints.FILL, CellConstraints.DEFAULT));
        radiusSpinner = new JSpinner();
        attributePanel.add(radiusSpinner, cc.xy(3, 16, CellConstraints.FILL, CellConstraints.DEFAULT));
        grainFactorSpinner = new JSpinner();
        attributePanel.add(grainFactorSpinner, cc.xy(3, 18, CellConstraints.FILL, CellConstraints.DEFAULT));
        label2.setLabelFor(durationPulseSpinner);
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadLabelText$$$(JLabel component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setDisplayedMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
}
